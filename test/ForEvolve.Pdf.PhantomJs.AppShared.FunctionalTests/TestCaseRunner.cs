using ForEvolve.Pdf.Abstractions;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ForEvolve.Pdf.PhantomJs.AppShared.FunctionalTests
{
    public class TestCaseRunner
    {
        public IEnumerable<Func<string>> GetAll(IHtmlToPdfConverter htmlToPdfConverter, string targetDirectory)
        {
            return new List<Func<string>>
            {
                () => BasicHtmlTest(htmlToPdfConverter, targetDirectory),
                () => WithInlineStyles(htmlToPdfConverter, targetDirectory),
                () => WithRelativeStyleSheet(htmlToPdfConverter, targetDirectory)
            };
        }

        public IEnumerable<TestCaseResult> RunAll(IHtmlToPdfConverter htmlToPdfConverter, string targetDirectory)
        {
            return GetAll(htmlToPdfConverter, targetDirectory)
                .Select(testCase => RunOne(testCase));
        }

        public TestCaseResult RunOne(Func<string> testCase)
        {
            var result = new TestCaseResult();
            try
            {
                result.GeneratedFilePath = testCase();
                result.Suceeded = true;
            }
            catch (Exception ex)
            {
                result.Suceeded = false;
                result.Error = ex.Message;
            }
            return result;
        }

        private string ConvertHtml(string htmlToConvert, IHtmlToPdfConverter htmlToPdfConverter, string targetDirectory)
        {
            var pathOftheGeneratedPdf = htmlToPdfConverter.Convert(htmlToConvert, targetDirectory);
            Console.WriteLine($"Pdf generated at: {pathOftheGeneratedPdf}");
            return pathOftheGeneratedPdf;
        }

        private string WithRelativeStyleSheet(IHtmlToPdfConverter htmlToPdfConverter, string targetDirectory)
        {
            var htmlToConvert =
@"
<!DOCTYPE html>
<html>
<head>
    <title>complex-test</title>
    <link href=""assets/css/pdf-styles.css"" rel=""stylesheet"" />
</head>
<body>
    <h1>Hello World!</h1>
    <p>This PDF has been generated by PhantomJs ;)</p>
    <p>This PDF loads an external CSS stylesheet.</p>

    <h2>This is a subtitle</h2>
    <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla dignissim sit amet erat vehicula semper. In lobortis, velit mattis sagittis accumsan, erat nisl tincidunt dui, varius imperdiet elit lacus non metus. Ut iaculis maximus semper. Interdum et malesuada fames ac ante ipsum primis in faucibus. Ut ac pharetra augue. Fusce vitae felis auctor, rutrum urna vitae, sagittis nibh. Curabitur in aliquet odio, non varius orci. Aenean sit amet rutrum nibh. Aenean erat urna, efficitur id maximus a, dapibus ut sem.</p>
</body>
</html>
";
            return ConvertHtml(htmlToConvert, htmlToPdfConverter, targetDirectory);
        }

        private string WithInlineStyles(IHtmlToPdfConverter htmlToPdfConverter, string targetDirectory)
        {
            var htmlToConvert =
@"
<!DOCTYPE html>
<html>
<head>
    <title>complex-test</title>
    <style>
        body {
            color: #333;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        h1 {
            background: #ff0000;
        }
    </style>
</head>
<body>
    <h1>Hello World!</h1>
    <p>This PDF has been generated by PhantomJs ;)</p>

    <h2>This is a subtitle</h2>
    <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla dignissim sit amet erat vehicula semper. In lobortis, velit mattis sagittis accumsan, erat nisl tincidunt dui, varius imperdiet elit lacus non metus. Ut iaculis maximus semper. Interdum et malesuada fames ac ante ipsum primis in faucibus. Ut ac pharetra augue. Fusce vitae felis auctor, rutrum urna vitae, sagittis nibh. Curabitur in aliquet odio, non varius orci. Aenean sit amet rutrum nibh. Aenean erat urna, efficitur id maximus a, dapibus ut sem.</p>
</body>
</html>
";
            return ConvertHtml(htmlToConvert, htmlToPdfConverter, targetDirectory);
        }

        private string BasicHtmlTest(IHtmlToPdfConverter htmlToPdfConverter, string targetDirectory)
        {
            var htmlToConvert =
@"
<!DOCTYPE html>
<html>
<head>

</head>
<body>
    <h1>Hello World!</h1>
    <p>This PDF has been generated by PhantomJs ;)</p>
</body>
</html>
";
            // Generate pdf from html and place in the current folder.
            return ConvertHtml(htmlToConvert, htmlToPdfConverter, targetDirectory);
        }
    }

    public class TestCaseResult
    {
        public bool Suceeded { get; set; }
        public string GeneratedFilePath { get; set; }
        public string Error { get; set; }
    }
}
